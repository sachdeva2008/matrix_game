{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","matrix","boxCount","msg","undefined","userMatrix","userEndGameTime","matrixBoxClickHandler","bind","assertThisInitialized","endGameHandler","endGameVar","boxElemRef","_this2","prompt","setState","Array","from","length","setInterval","react_default","a","createElement","style","color","clearInterval","forEach","elem","i","setTimeout","classList","add","remove","target","_ref","push","_state$boxCount","_this3","_this$state","_this$state$matrix","matrixBowWidth","mFlexProp","concat","Fragment","className","minWidth","map","val","key","onClick","el","flex","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2bbf611.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { stat } from 'fs';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      matrix: [],\n      boxCount:0,\n      msg: undefined\n    }\n    this.userMatrix = 0;\n    this.userEndGameTime   = 0;\n    this.matrixBoxClickHandler = this.matrixBoxClickHandler.bind(this);\n    this.endGameHandler = this.endGameHandler.bind(this);\n    this.endGameVar = null;\n    this.boxElemRef = [];\n  }\n  componentDidMount(){\n    this.userMatrix = prompt(\"Please enter matrix size\",3);\n    this.userEndGameTime   = prompt(\"Please enter time to complete game\",3);\n    this.setState(()=>{\n      //register end game handler\n      \n      return {\n          matrix: Array.from({length: this.userMatrix*this.userMatrix}),\n          boxCount: this.userMatrix*this.userMatrix\n        }\n    },()=> this.endGameVar = setInterval(this.endGameHandler,(this.userEndGameTime*1000)) );\n\n  }\n\n   endGameHandler(){\n    const {boxCount} = this.state;\n    if(boxCount == 0){\n      this.setState({msg: <em style={{color:'green'}}>You are winner.</em>});\n      clearInterval(this.endGameVar);\n    }else{\n      this.setState({\n        msg: <em style={{color:'red'}}>You are looser.</em>,\n        boxCount: this.userMatrix*this.userMatrix\n      });\n    }\n    //repaint boxes\n   this.boxElemRef.forEach(  (elem,i)=>{\n      (function () {\n       setTimeout(()=>{\n        elem.classList.add('bkg');\n        elem.classList.remove('disable-click');\n       },75*i);\n    })(i);\n    });\n    this.boxElemRef.length = 0;\n  }\n\n  matrixBoxClickHandler({target}){\n    //remove bacground color and prevent clicking again\n    target.classList.remove('bkg');\n    target.classList.add('disable-click');\n    this.boxElemRef.push(target);\n    \n    this.setState((state) => {\n        const { boxCount = 0 } = state;\n        const nextBoxcount = boxCount - 1;\n        return {\n          boxCount: nextBoxcount\n        }\n    });\n  }\n\n  render(){\n    const { matrix = [],msg} = this.state;\n    const matrixBowWidth = 100/this.userMatrix;\n    const mFlexProp = `0 0 calc(${matrixBowWidth}% - 2px)`;\n    return (\n      <>\n      {msg && <div className=\"msg\">{msg}</div>}\n        <div className=\"matrix-box-container\" style={{minWidth: `calc(${this.userMatrix*5}rem + ${this.userMatrix*2}px)`}}>\n        <React.Fragment>\n          {matrix.map( (val,i) => <div key={i} className=\"box bkg\" \n                     onClick={ (el)=> this.matrixBoxClickHandler(el)} \n                     style={{flex: mFlexProp}}>{i}</div>)}\n        </React.Fragment>\n        </div>\n        </>\n    )\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}